'use client';
import { useState } from 'react';

type Option = { label: string; value: string };

const defaultKids: Option[] = [
  { label: 'Ryan', value: 'ryan' },
  { label: 'Derek', value: 'derek' },
  { label: 'Add Kid…', value: 'add' },
];

const defaultCaregivers: Option[] = [
  { label: 'Family', value: 'family' },
  { label: 'Relatives', value: 'relatives' },
  { label: 'Temporary Caregivers', value: 'temp' },
];

const defaultADL: Option[] = [
  { label: 'Morning routine', value: 'adl_morning' },
  { label: 'Meals', value: 'adl_meals' },
  { label: 'Hygiene', value: 'adl_hygiene' },
  { label: 'Homework', value: 'adl_homework' },
  { label: 'Chores', value: 'adl_chores' },
  { label: 'Sleep', value: 'adl_sleep' },
  { label: 'Custom…', value: 'adl_custom' },
];

type Box = {
  id: string;
  title: string;
  subtitle: string;
  content: JSX.Element;
};

function Select({
  label, options, value, onChange,
}: {
  label: string;
  options: Option[];
  value: string;
  onChange: (v: string) => void;
}) {
  return (
    <label className="block text-sm">
      <span className="text-slate-600">{label}</span>
      <select
        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500"
        value={value}
        onChange={(e) => onChange(e.target.value)}
      >
        {options.map((o) => (
          <option key={o.value} value={o.value}>{o.label}</option>
        ))}
      </select>
    </label>
  );
}

function BoxCard({ box, startOpen = false }: { box: Box; startOpen?: boolean }) {
  const [open, setOpen] = useState(startOpen);
  return (
    <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm transition hover:shadow-md">
      <button
        className="flex w-full items-start justify-between gap-4 text-left"
        onClick={() => setOpen((v) => !v)}
        aria-expanded={open}
      >
        <div>
          <h3 className="text-lg font-semibold text-slate-900">{box.title}</h3>
          <p className="mt-1 text-sm text-slate-600">{box.subtitle}</p>
        </div>
        <span className="inline-flex h-7 w-7 shrink-0 items-center justify-center rounded-full border border-slate-300 text-slate-600" aria-hidden="true">
          {open ? '–' : '+'}
        </span>
      </button>
      {open && <div className="mt-5">{box.content}</div>}
    </div>
  );
}

export default function FeatureBoxes() {
  const [kid, setKid] = useState(defaultKids[0].value);
  const [cg, setCg] = useState(defaultCaregivers[0].value);
  const [adl, setAdl] = useState(defaultADL[0].value);

  const boxes: Box[] = [
    {
      id: 'calendar',
      title: 'Shared Care Calendar',
      subtitle: 'Plan visits and routines with reminders everyone can see.',
      content: (
        <div className="space-y-5 text-sm text-slate-700">
          <div className="grid gap-4 sm:grid-cols-3">
            <Select label="Child" options={defaultKids} value={kid} onChange={setKid} />
            <Select label="Caregiver" options={defaultCaregivers} value={cg} onChange={setCg} />
            <Select label="ADL Template" options={defaultADL} value={adl} onChange={setAdl} />
          </div>
          <ol className="list-decimal space-y-2 pl-5">
            <li>Create event → assign people → set recurrence (one-time/daily/weekly/monthly).</li>
            <li>Add reminders (10/30/60m, custom). Acknowledgements appear in the timeline.</li>
            <li>Post-event follow-up prompts (quick note / photo).</li>
          </ol>
          <p className="text-xs text-slate-500">
            Visibility per event: Family-only • Relatives • Caregivers • Custom.
          </p>
        </div>
      ),
    },
    {
      id: 'mar',
      title: 'Medications & MAR',
      subtitle: 'Doses, refills, and simple MAR logs with photo proof.',
      content: (
        <div className="space-y-5 text-sm text-slate-700">
          <ol className="list-decimal space-y-2 pl-5">
            <li>Add medication → dose/route/schedule → assign responsible caregiver.</li>
            <li>MAR at each time: mark given / skipped / deferred → initials.</li>
            <li>Optional photo proof and notes; refill alerts before threshold.</li>
          </ol>
          <div className="rounded-lg bg-emerald-50 p-4 text-xs text-emerald-800">
            Exports: per-member MAR PDF, adherence summary.
          </div>
        </div>
      ),
    },
    {
      id: 'geofence',
      title: 'Geofence & Alerts',
      subtitle: 'Real-time arrival/leave alerts with panic SOS and follow-ups.',
      content: (
        <div className="space-y-5 text-sm text-slate-700">
          <ul className="list-disc space-y-2 pl-5">
            <li>Define zones: Home • School • Clinic • Sports • Custom.</li>
            <li>Enter/Exit triggers push/SMS; guardians receive one-tap acks.</li>
            <li>Follow-ups: “Left school → confirm safe arrival at home”.</li>
          </ul>
          <p className="text-xs text-slate-500">Audit trail: timestamp, actor, zone, follow-up status.</p>
        </div>
      ),
    },
    {
      id: 'vault',
      title: 'Visit Notes & Doc Vault',
      subtitle: 'Keep care notes, photos, and PDFs in one place.',
      content: (
        <div className="space-y-3 text-sm text-slate-700">
          <p>Structured post-visit notes (symptoms, vitals, instructions) with attachments and audience controls.</p>
          <p>Search by person, type, date range, and tags.</p>
        </div>
      ),
    },
    {
      id: 'household',
      title: 'Household & Mental Load',
      subtitle: 'Chores, shopping, budgets, and recurring home tasks.',
      content: (
        <div className="space-y-3 text-sm text-slate-700">
          <p>Task lists per room; recurring maintenance; shopping lists.</p>
          <p>Kid assignments with streaks/badges and photo proof.</p>
        </div>
      ),
    },
    {
      id: 'comms',
      title: 'Communication & Social',
      subtitle: 'Secure chat and quick updates inside your circle.',
      content: (
        <div className="space-y-3 text-sm text-slate-700">
          <p>Circle chat, photo/file posts, optional private livestream.</p>
          <p>Announcement posts with read receipts.</p>
        </div>
      ),
    },
    {
      id: 'permissions',
      title: 'Security & Permissions',
      subtitle: 'Precise sharing + parental controls.',
      content: (
        <div className="space-y-3 text-sm text-slate-700">
          <p>Roles: Owners (parents), Relatives (limited), Caregivers (time-limited). Audience dropdown on every item.</p>
          <p>Parental enforce (admin-only): screen_lock, network_pause, play_loud_alert, restrict_apps (cooldown + busy guards).</p>
        </div>
      ),
    },
    {
      id: 'devices',
      title: 'Devices & Telemetry',
      subtitle: 'Optional device checks and vitals thresholds (future).',
      content: (
        <div className="space-y-3 text-sm text-slate-700">
          <p>Device policy checks respecting parental controls.</p>
          <p>Bridges to geofencing; future vitals alerts.</p>
        </div>
      ),
    },
  ];

  return (
    <section id="features" className="mx-auto max-w-6xl px-6 pb-20">
      <h2 className="text-xl font-semibold text-slate-900">Features</h2>
      <p className="mt-1 text-sm text-slate-600">
        Click a box to expand details. Dropdowns are interactive for demo on this page.
      </p>
      <div className="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2">
        {boxes.map((b, i) => (
          <BoxCard key={b.id} box={b} startOpen={i < 3} />
        ))}
      </div>
    </section>
  );
}