// src/app/api/stripe/session/route.ts
import { NextResponse } from "next/server";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("session_id");
    if (!id) return NextResponse.json({ error: "Missing session_id" }, { status: 400 });

    const sk = process.env.STRIPE_SECRET_KEY;
    if (!sk) return NextResponse.json({ error: "Stripe not configured" }, { status: 500 });

    const Stripe = (await import("stripe")).default;
    const stripe = new Stripe(sk, { apiVersion: "2023-10-16" });

    const session = await stripe.checkout.sessions.retrieve(id, {
      expand: ["payment_intent.charges", "invoice", "subscription"],
    });

    // Try to surface a receipt URL:
    let receiptUrl: string | undefined;
    // One-time: from PI â†’ charge
    const pi = session.payment_intent && typeof session.payment_intent !== "string" ? session.payment_intent : null;
    const charge = pi && "charges" in pi ? (pi.charges?.data?.[0] as any) : null;
    if (charge?.receipt_url) receiptUrl = charge.receipt_url;

    // Subscription: from invoice (hosted invoice)
    const invoice = session.invoice && typeof session.invoice !== "string" ? session.invoice : null;
    if (!receiptUrl && invoice?.hosted_invoice_url) receiptUrl = invoice.hosted_invoice_url;

    return NextResponse.json({
      id: session.id,
      mode: session.mode,
      status: session.status,
      amount_total: session.amount_total,
      currency: session.currency,
      customer_email: session.customer_details?.email || session.customer_email || null,
      receipt_url: receiptUrl || null,
      subscription_id: typeof session.subscription === "string" ? session.subscription : session.subscription?.id || null,
      payment_intent_id: typeof session.payment_intent === "string" ? session.payment_intent : session.payment_intent?.id || null,
    });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "Session lookup failed" }, { status: 400 });
  }
}
